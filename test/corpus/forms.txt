================================================================================
lambda
================================================================================

(lambda () 5)
(lambda (x) x)
(lambda (x y)
  (+ x y))

--------------------------------------------------------------------------------

(source
  (lambda
   (parameters)
   (body
     (integer)))
  (lambda
    (parameters
      (binding
        (symbol)))
    (body
      (symbol)))
  (lambda
    (parameters
      (binding
        (symbol))
      (binding
        (symbol)))
    (body
      (list
        (symbol)
        (symbol)
        (symbol)))))

================================================================================
match-lambda
================================================================================

(match-lambda
  (('ok msg)
    (ok))
  (('warn msg)
    (warn))
  (('crit msg)
    (crit)))

--------------------------------------------------------------------------------

(source
  (match_lambda
    (patterns
      (pattern_clause
        (pattern
          (atom)
          (symbol))
        (body
          (list
            (symbol))))
      (pattern_clause
        (pattern
          (atom)
          (symbol))
        (body
          (list
            (symbol))))
      (pattern_clause
        (pattern
          (atom)
          (symbol))
        (body
          (list
            (symbol)))))))

================================================================================
defun
================================================================================

(defun five () 5)
(defun id (x) x)
(defun add (x y)
  (+ x y))
(defun fac
  ((1) 1)
  ((n) (* n (fac (- n 1)))))
(defun five ()
  "returns five"
  5)
(defun fac
  "compute factorial"
  ((1) 1)
  ((n) (* n (fac (- n 1)))))

--------------------------------------------------------------------------------

(source
  (defun
    name: (symbol)
    (parameters)
    (body
      (integer)))
  (defun
    name: (symbol)
    (parameters
      (binding
        (symbol)))
    (body
      (symbol)))
  (defun
    name: (symbol)
    (parameters
      (binding
        (symbol))
      (binding
        (symbol)))
    (body
      (list
        (symbol)
        (symbol)
        (symbol))))
  (defun
    name: (symbol)
    (patterns
      (pattern_clause
        (pattern
          (integer))
        (body
          (integer)))
      (pattern_clause
        (pattern
          (symbol))
        (body
          (list
            (symbol)
            (symbol)
            (list
              (symbol)
              (list
                (symbol)
                (symbol)
                (integer))))))))
  (defun
    name: (symbol)
    (parameters)
    (body
      (list_string)
      (integer)))
  (defun
    name: (symbol)
    (list_string)
    (patterns
      (pattern_clause
        (pattern
          (integer))
        (body
          (integer)))
      (pattern_clause
        (pattern
          (symbol))
        (body
          (list
            (symbol)
            (symbol)
            (list
              (symbol)
              (list
                (symbol)
                (symbol)
                (integer)))))))))

================================================================================
defmacro
================================================================================

(defmacro five () 5)
(defmacro id (x) x)
(defmacro add (x y)
  (+ x y))
(defmacro fac
  ((1) 1)
  ((n) (* n (fac (- n 1)))))
(defmacro five ()
  "returns five"
  5)
(defmacro fac
  "compute factorial"
  ((1) 1)
  ((n) (* n (fac (- n 1)))))

--------------------------------------------------------------------------------

(source
  (defmacro
    name: (symbol)
    (parameters)
    (body
      (integer)))
  (defmacro
    name: (symbol)
    (parameters
      (binding
        (symbol)))
    (body
      (symbol)))
  (defmacro
    name: (symbol)
    (parameters
      (binding
        (symbol))
      (binding
        (symbol)))
    (body
      (list
        (symbol)
        (symbol)
        (symbol))))
  (defmacro
    name: (symbol)
    (patterns
      (pattern_clause
        (pattern
          (integer))
        (body
          (integer)))
      (pattern_clause
        (pattern
          (symbol))
        (body
          (list
            (symbol)
            (symbol)
            (list
              (symbol)
              (list
                (symbol)
                (symbol)
                (integer))))))))
  (defmacro
    name: (symbol)
    (parameters)
    (body
      (list_string)
      (integer)))
  (defmacro
    name: (symbol)
    (list_string)
    (patterns
      (pattern_clause
        (pattern
          (integer))
        (body
          (integer)))
      (pattern_clause
        (pattern
          (symbol))
        (body
          (list
            (symbol)
            (symbol)
            (list
              (symbol)
              (list
                (symbol)
                (symbol)
                (integer)))))))))

================================================================================
defmodule
================================================================================

(defmodule test
  "This is the module documentation."
  (export all))

(defmodule test
  (export (f 2) (g 1)))

(defmodule test
  (import
    (from mod (f 2)
              (g 1))))

(defmodule test
  (import
    (rename mod ((g1 2) m-g1)
                ((g2 1) m-g2))))

(defmodule test
  (module-alias (really-long-module-name rlmn)
                (other-really-long-module-name orlmn)))
(defmodule test
  (attr-1 value-1 value-2))

--------------------------------------------------------------------------------

(source
  (module
    name: (symbol)
    documentation: (list_string)
    (exports))
  (module
    name: (symbol)
    (exports
      (function
        name: (symbol)
        arity: (integer))
      (function
        name: (symbol)
        arity: (integer))))
  (module
    name: (symbol)
    (imports
      (import
        (import_from
          module: (symbol)
          functions: (import_from_functions
            (function
              name: (symbol)
              arity: (integer))
            (function
              name: (symbol)
              arity: (integer)))))))
  (module
    name: (symbol)
    (imports
      (import
        (import_rename
          module: (symbol)
          (aliases
            (import_alias
              function: (function
                name: (symbol)
                arity: (integer))
              alias: (symbol))
            (import_alias
              function: (function
                name: (symbol)
                arity: (integer))
              alias: (symbol)))))))
  (module
    name: (symbol)
    alias: (module_alias
      (module_alias_item
        module: (symbol)
        alias: (symbol))
      (module_alias_item
        module: (symbol)
        alias: (symbol))))
  (module
    name: (symbol)
    (list
      (symbol)
      (symbol)
      (symbol))))

================================================================================
let
================================================================================

(let ((x 2)
      (y 3))
  (list x y (* x y)))

(let* [(x 2)
       (y 3)
       (z (* x y))]
  (list x y z))

(let [((tuple name place age) #("Ford Prefect" "Betelgeuse Seven" 234))]
  (list name place age))

(let-function [(add (lambda [x y] (+ x y)))]
  (add 1 2))
--------------------------------------------------------------------------------

(source
  (let
    (binding_clause
      (binding
        (symbol))
      (integer))
    (binding_clause
      (binding
        (symbol))
      (integer))
    (body
      (list
        (symbol)
        (symbol)
        (symbol)
        (list
          (symbol)
          (symbol)
          (symbol)))))
  (let
    (binding_clause
      (binding
        (symbol))
      (integer))
    (binding_clause
      (binding
        (symbol))
      (integer))
    (binding_clause
      (binding
        (symbol))
      (list
        (symbol)
        (symbol)
        (symbol)))
    (body
      (list
        (symbol)
        (symbol)
        (symbol)
        (symbol))))
  (let
    (pattern_clause
      (pattern
        (symbol)
        (symbol)
        (symbol)
        (symbol))
      (body
        (tuple
          (list_string)
          (list_string)
          (integer))))
    (body
      (list
        (symbol)
        (symbol)
        (symbol)
        (symbol))))
  (let
    (binding_clause
      (binding
        (symbol))
      (lambda
        (parameters
          (binding
            (symbol))
          (binding
            (symbol)))
        (body
          (list
            (symbol)
            (symbol)
            (symbol)))))
    (body
      (list
        (symbol)
        (integer)
        (integer)))))

================================================================================
if
================================================================================

(if (> a b)
  a
  (b - a))

--------------------------------------------------------------------------------

(source
  (if
    (predicate
      (list
        (symbol)
        (symbol)
        (symbol)))
    (true_expr
      (symbol))
    (false_expr
      (list
        (symbol)
        (symbol)
        (symbol)))))

================================================================================
case
================================================================================

(case x
  ((cons head '())
   "Only one element")
  ((list 1 2)
   "Two element list")
  ((list 'a _)
    "List starts with 'a'")
  (_ "Anything goes"))

--------------------------------------------------------------------------------

(source
  (case
    (symbol)
    (pattern_clause
      (pattern
        (symbol)
        (symbol)
        (quoted_list))
      (body
        (list_string)))
    (pattern_clause
      (pattern
        (symbol)
        (integer)
        (integer))
      (body
        (list_string)))
    (pattern_clause
      (pattern
        (symbol)
        (atom)
        (symbol))
      (body
        (list_string)))
    (pattern_clause
      (anything)
      (body
        (list_string)))))

================================================================================
cond
================================================================================

(cond ((lists:member x '(1 2 3)) "First three")
      ((=:= x 4) "Is four")
      ((>= x 5) "More than four")
      ('true "You chose poorly"))

(cond
  ((?= (cons head '()) x)
    "Only one element")
  ((?= (list 1 2) x)
    "Two element list")
  ((?= (list a _) (when (is_atom a)) x)
    "List starts with an atom")
  ((?= (cons _ (cons a _)) (when (is_tuple a)) x)
    "Second element is a tuple")
  ('true "Anything goes"))
--------------------------------------------------------------------------------

(source
  (cond
    (cond_clause
      (predicate
        (list
          (symbol)
          (symbol)
          (quoted_list
            (integer)
            (integer)
            (integer))))
      (list_string))
    (cond_clause
      (predicate
        (list
          (symbol)
          (symbol)
          (integer)))
      (list_string))
    (cond_clause
      (predicate
        (list
          (symbol)
          (symbol)
          (integer)))
      (list_string))
    (cond_clause
      (predicate
        (atom))
      (list_string)))
  (cond
    (cond_clause
      (pattern
        (list
          (symbol)
          (symbol)
          (quoted_list))
        (symbol))
      (list_string))
    (cond_clause
      (pattern
        (list
          (symbol)
          (integer)
          (integer))
        (symbol))
      (list_string))
    (cond_clause
      (pattern
        (list
          (symbol)
          (symbol)
          (symbol))
        (guard
          (list
            (symbol)
            (symbol)))
        (symbol))
      (list_string))
    (cond_clause
      (pattern
        (list
          (symbol)
          (symbol)
          (list
            (symbol)
            (symbol)
            (symbol)))
        (guard
          (list
            (symbol)
            (symbol)))
        (symbol))
      (list_string))
    (cond_clause
      (predicate
        (atom))
      (list_string))))

